{"ast":null,"code":"var _jsxFileName = \"/app/src/components/maps/ContextMenu.tsx\",\n  _s = $RefreshSig$();\n// src/components/maps/ContextMenu.tsx\n\nimport React from 'react';\nimport { useMapEvents } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContextMenu = ({\n  contextMenu,\n  handleCopyCoordinates\n}) => {\n  if (!contextMenu.visible) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'absolute',\n      top: contextMenu.y,\n      left: contextMenu.x,\n      zIndex: 1000\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCopyCoordinates,\n      children: \"\\u041A\\u043E\\u043F\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043A\\u043E\\u043E\\u0440\\u0434\\u0438\\u043D\\u0430\\u0442\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_c = ContextMenu;\nexport const handleCopyCoordinates = contextMenu => {\n  const coordinates = `${contextMenu.lat}, ${contextMenu.lng}`;\n  navigator.clipboard.writeText(coordinates);\n  alert(`Координаты скопированы: ${coordinates}`);\n};\nexport const handleRightClick = (event, setContextMenu) => {\n  event.originalEvent.preventDefault();\n  const {\n    latlng,\n    containerPoint\n  } = event;\n  setContextMenu({\n    visible: true,\n    x: containerPoint.x,\n    y: containerPoint.y,\n    lat: latlng.lat,\n    lng: latlng.lng\n  });\n};\nexport const MapEventHandlers = ({\n  setContextMenu\n}) => {\n  _s();\n  useMapEvents({\n    contextmenu: event => {\n      handleRightClick(event, setContextMenu);\n    },\n    click: () => {\n      setContextMenu(prev => ({\n        ...prev,\n        visible: false\n      }));\n    }\n  });\n  return null;\n};\n_s(MapEventHandlers, \"Ld/tk8Iz8AdZhC1l7acENaOEoCo=\", false, function () {\n  return [useMapEvents];\n});\n_c2 = MapEventHandlers;\nexport default ContextMenu;\nvar _c, _c2;\n$RefreshReg$(_c, \"ContextMenu\");\n$RefreshReg$(_c2, \"MapEventHandlers\");","map":{"version":3,"names":["React","useMapEvents","jsxDEV","_jsxDEV","ContextMenu","contextMenu","handleCopyCoordinates","visible","style","position","top","y","left","x","zIndex","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","coordinates","lat","lng","navigator","clipboard","writeText","alert","handleRightClick","event","setContextMenu","originalEvent","preventDefault","latlng","containerPoint","MapEventHandlers","_s","contextmenu","click","prev","_c2","$RefreshReg$"],"sources":["/app/src/components/maps/ContextMenu.tsx"],"sourcesContent":["// src/components/maps/ContextMenu.tsx\n\nimport React from 'react';\nimport { useMapEvents } from 'react-leaflet';\n\nexport interface ContextMenuProps {\n  contextMenu: {\n    visible: boolean;\n    x: number;\n    y: number;\n    lat: number;\n    lng: number;\n  };\n  handleCopyCoordinates: () => void;\n}\n\nexport const ContextMenu: React.FC<ContextMenuProps> = ({ contextMenu, handleCopyCoordinates }) => {\n  if (!contextMenu.visible) return null;\n\n  return (\n    <div style={{ position: 'absolute', top: contextMenu.y, left: contextMenu.x, zIndex: 1000 }}>\n      <button onClick={handleCopyCoordinates}>Копировать координаты</button>\n    </div>\n  );\n};\n\nexport const handleCopyCoordinates = (contextMenu: ContextMenuProps['contextMenu']) => {\n  const coordinates = `${contextMenu.lat}, ${contextMenu.lng}`;\n  navigator.clipboard.writeText(coordinates);\n  alert(`Координаты скопированы: ${coordinates}`);\n};\n\nexport const handleRightClick = (\n  event: any,\n  setContextMenu: React.Dispatch<React.SetStateAction<ContextMenuProps['contextMenu']>>\n) => {\n  event.originalEvent.preventDefault();\n  const { latlng, containerPoint } = event;\n  setContextMenu({\n    visible: true,\n    x: containerPoint.x,\n    y: containerPoint.y,\n    lat: latlng.lat,\n    lng: latlng.lng,\n  });\n};\n\nexport const MapEventHandlers = ({\n  setContextMenu,\n}: {\n  setContextMenu: React.Dispatch<React.SetStateAction<ContextMenuProps['contextMenu']>>;\n}) => {\n  useMapEvents({\n    contextmenu: (event) => {\n      handleRightClick(event, setContextMenu);\n    },\n    click: () => {\n      setContextMenu((prev) => ({ ...prev, visible: false }));\n    },\n  });\n  return null;\n};\n\nexport default ContextMenu;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAa7C,OAAO,MAAMC,WAAuC,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAsB,CAAC,KAAK;EACjG,IAAI,CAACD,WAAW,CAACE,OAAO,EAAE,OAAO,IAAI;EAErC,oBACEJ,OAAA;IAAKK,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,GAAG,EAAEL,WAAW,CAACM,CAAC;MAAEC,IAAI,EAAEP,WAAW,CAACQ,CAAC;MAAEC,MAAM,EAAE;IAAK,CAAE;IAAAC,QAAA,eAC1FZ,OAAA;MAAQa,OAAO,EAAEV,qBAAsB;MAAAS,QAAA,EAAC;IAAqB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;AAACC,EAAA,GARWjB,WAAuC;AAUpD,OAAO,MAAME,qBAAqB,GAAID,WAA4C,IAAK;EACrF,MAAMiB,WAAW,GAAG,GAAGjB,WAAW,CAACkB,GAAG,KAAKlB,WAAW,CAACmB,GAAG,EAAE;EAC5DC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACL,WAAW,CAAC;EAC1CM,KAAK,CAAC,2BAA2BN,WAAW,EAAE,CAAC;AACjD,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAGA,CAC9BC,KAAU,EACVC,cAAqF,KAClF;EACHD,KAAK,CAACE,aAAa,CAACC,cAAc,CAAC,CAAC;EACpC,MAAM;IAAEC,MAAM;IAAEC;EAAe,CAAC,GAAGL,KAAK;EACxCC,cAAc,CAAC;IACbxB,OAAO,EAAE,IAAI;IACbM,CAAC,EAAEsB,cAAc,CAACtB,CAAC;IACnBF,CAAC,EAAEwB,cAAc,CAACxB,CAAC;IACnBY,GAAG,EAAEW,MAAM,CAACX,GAAG;IACfC,GAAG,EAAEU,MAAM,CAACV;EACd,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMY,gBAAgB,GAAGA,CAAC;EAC/BL;AAGF,CAAC,KAAK;EAAAM,EAAA;EACJpC,YAAY,CAAC;IACXqC,WAAW,EAAGR,KAAK,IAAK;MACtBD,gBAAgB,CAACC,KAAK,EAAEC,cAAc,CAAC;IACzC,CAAC;IACDQ,KAAK,EAAEA,CAAA,KAAM;MACXR,cAAc,CAAES,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAEjC,OAAO,EAAE;MAAM,CAAC,CAAC,CAAC;IACzD;EACF,CAAC,CAAC;EACF,OAAO,IAAI;AACb,CAAC;AAAC8B,EAAA,CAdWD,gBAAgB;EAAA,QAK3BnC,YAAY;AAAA;AAAAwC,GAAA,GALDL,gBAAgB;AAgB7B,eAAehC,WAAW;AAAC,IAAAiB,EAAA,EAAAoB,GAAA;AAAAC,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}