{"ast":null,"code":"var _jsxFileName = \"/app/src/components/maps/panoLayer/PanoramaViewer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport Marzipano from 'marzipano';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PanoramaViewer = ({\n  markerId,\n  isExpanded\n}) => {\n  _s();\n  const viewerRef = useRef(null);\n  const viewerInstanceRef = useRef(null);\n  // Если нужно показывать блок с информацией, включаем флажок:\n  const [showPointInfo] = useState(false);\n  const [pointData, setPointData] = useState(null);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const toggleFullscreen = () => {\n    if (viewerRef.current) {\n      if (!isFullscreen) {\n        if (viewerRef.current.requestFullscreen) {\n          viewerRef.current.requestFullscreen();\n        }\n        setIsFullscreen(true);\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n        setIsFullscreen(false);\n      }\n    }\n  };\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n  useEffect(() => {\n    let objectUrl = null;\n    let currentViewer = null;\n\n    // Функция инициализации Marzipano\n    const initializeViewer = async () => {\n      try {\n        // 1. Загружаем информацию о панораме (атрибуты), если требуется\n        const response = await fetch(`https://api.botplus.ru/pano_info/${markerId}`);\n        const data = await response.json();\n        setPointData(data);\n\n        // 2. Загружаем само изображение как Blob\n        const fileResponse = await fetch(`https://api.botplus.ru/pano_info/${markerId}/download`);\n        const blob = await fileResponse.blob();\n\n        // 3. Создаём локальный объект-URL из Blob\n        objectUrl = URL.createObjectURL(blob);\n\n        // 4. Если наш div для Marzipano существует, создаём Viewer\n        if (viewerRef.current) {\n          currentViewer = new Marzipano.Viewer(viewerRef.current, {\n            stage: {\n              progressive: true\n            }\n          });\n\n          // Источник – ссылка на blob (как обычная строка URL)\n          const source = Marzipano.ImageUrlSource.fromString(objectUrl);\n\n          // Указываем, что панорама у нас equirect (360x180)\n          // Можно выставить точную ширину, если знаете (например, 8000 px)\n          const geometry = new Marzipano.EquirectGeometry([{\n            width: 4000\n          }]);\n\n          // Ограничитель обзора, чтоб слишком не \"отъезжать\"\n          const limiter = Marzipano.RectilinearView.limit.traditional(4096, 120 * Math.PI / 180);\n\n          // Начальный вид (yaw: Math.PI – это разворот \"назад\")\n          const view = new Marzipano.RectilinearView({\n            yaw: Math.PI\n          }, limiter);\n\n          // Создаём сцену\n          const scene = currentViewer.createScene({\n            source: source,\n            geometry: geometry,\n            view: view\n          });\n\n          // Плавно переключаемся на неё\n          scene.switchTo({\n            transitionDuration: 500\n          });\n\n          // Сохраняем инстанс, чтобы потом удалить при размонтаже\n          viewerInstanceRef.current = currentViewer;\n        }\n      } catch (error) {\n        console.error('Ошибка при инициализации панорамы:', error);\n      }\n    };\n\n    // Если markerId не пуст, загружаем панораму\n    if (markerId) {\n      initializeViewer();\n    }\n\n    // Очистка при смене или размонтаже\n    return () => {\n      if (currentViewer) {\n        currentViewer.destroy();\n      }\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [markerId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panorama-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: viewerRef,\n      className: \"panorama-viewer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleFullscreen,\n        style: {\n          position: 'absolute',\n          bottom: '20px',\n          left: '20px',\n          zIndex: 1000,\n          padding: '8px 16px',\n          background: 'var(--color-surface-alt)',\n          color: 'var(--color-text)',\n          border: '1px solid var(--color-border)',\n          borderRadius: 'var(--radius-base)',\n          cursor: 'pointer'\n        },\n        children: isFullscreen ? 'Свернуть' : 'На весь экран'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), showPointInfo && pointData && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"point-info-overlay\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: pointData.filename\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(PanoramaViewer, \"jbG5Kbx4BoYqlyNriY8PPdr5wrA=\");\n_c = PanoramaViewer;\nexport default PanoramaViewer;\nvar _c;\n$RefreshReg$(_c, \"PanoramaViewer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","Marzipano","jsxDEV","_jsxDEV","PanoramaViewer","markerId","isExpanded","_s","viewerRef","viewerInstanceRef","showPointInfo","pointData","setPointData","isFullscreen","setIsFullscreen","toggleFullscreen","current","requestFullscreen","document","exitFullscreen","handleFullscreenChange","fullscreenElement","addEventListener","removeEventListener","objectUrl","currentViewer","initializeViewer","response","fetch","data","json","fileResponse","blob","URL","createObjectURL","Viewer","stage","progressive","source","ImageUrlSource","fromString","geometry","EquirectGeometry","width","limiter","RectilinearView","limit","traditional","Math","PI","view","yaw","scene","createScene","switchTo","transitionDuration","error","console","destroy","revokeObjectURL","className","children","ref","onClick","style","position","bottom","left","zIndex","padding","background","color","border","borderRadius","cursor","fileName","_jsxFileName","lineNumber","columnNumber","filename","_c","$RefreshReg$"],"sources":["/app/src/components/maps/panoLayer/PanoramaViewer.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport Marzipano from 'marzipano';\n\ninterface PanoramaViewerProps {\n  markerId: string;      // Обратите внимание, что теперь точно string, без null\n  isExpanded: boolean;   // если нужно регулировать высоту\n}\n\nconst PanoramaViewer: React.FC<PanoramaViewerProps> = ({ markerId, isExpanded }) => {\n  const viewerRef = useRef<HTMLDivElement | null>(null);\n  const viewerInstanceRef = useRef<any>(null);\n  // Если нужно показывать блок с информацией, включаем флажок:\n  const [showPointInfo] = useState<boolean>(false);\n  const [pointData, setPointData] = useState<any>(null);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  const toggleFullscreen = () => {\n    if (viewerRef.current) {\n      if (!isFullscreen) {\n        if (viewerRef.current.requestFullscreen) {\n          viewerRef.current.requestFullscreen();\n        }\n        setIsFullscreen(true);\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n        setIsFullscreen(false);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const handleFullscreenChange = () => {\n      setIsFullscreen(!!document.fullscreenElement);\n    };\n\n    document.addEventListener('fullscreenchange', handleFullscreenChange);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', handleFullscreenChange);\n    };\n  }, []);\n\n  useEffect(() => {\n    let objectUrl: string | null = null;\n    let currentViewer: any = null;\n\n    // Функция инициализации Marzipano\n    const initializeViewer = async () => {\n      try {\n        // 1. Загружаем информацию о панораме (атрибуты), если требуется\n        const response = await fetch(`https://api.botplus.ru/pano_info/${markerId}`);\n        const data = await response.json();\n        setPointData(data);\n\n        // 2. Загружаем само изображение как Blob\n        const fileResponse = await fetch(`https://api.botplus.ru/pano_info/${markerId}/download`);\n        const blob = await fileResponse.blob();\n\n        // 3. Создаём локальный объект-URL из Blob\n        objectUrl = URL.createObjectURL(blob);\n\n        // 4. Если наш div для Marzipano существует, создаём Viewer\n        if (viewerRef.current) {\n          currentViewer = new Marzipano.Viewer(viewerRef.current, {\n            stage: { progressive: true },\n          });\n\n          // Источник – ссылка на blob (как обычная строка URL)\n          const source = Marzipano.ImageUrlSource.fromString(objectUrl);\n\n          // Указываем, что панорама у нас equirect (360x180)\n          // Можно выставить точную ширину, если знаете (например, 8000 px)\n          const geometry = new Marzipano.EquirectGeometry([{ width: 4000 }]);\n\n          // Ограничитель обзора, чтоб слишком не \"отъезжать\"\n          const limiter = Marzipano.RectilinearView.limit.traditional(\n            4096,\n            (120 * Math.PI) / 180\n          );\n\n          // Начальный вид (yaw: Math.PI – это разворот \"назад\")\n          const view = new Marzipano.RectilinearView({ yaw: Math.PI }, limiter);\n\n          // Создаём сцену\n          const scene = currentViewer.createScene({\n            source: source,\n            geometry: geometry,\n            view: view,\n          });\n\n          // Плавно переключаемся на неё\n          scene.switchTo({ transitionDuration: 500 });\n\n          // Сохраняем инстанс, чтобы потом удалить при размонтаже\n          viewerInstanceRef.current = currentViewer;\n        }\n      } catch (error) {\n        console.error('Ошибка при инициализации панорамы:', error);\n      }\n    };\n\n    // Если markerId не пуст, загружаем панораму\n    if (markerId) {\n      initializeViewer();\n    }\n\n    // Очистка при смене или размонтаже\n    return () => {\n      if (currentViewer) {\n        currentViewer.destroy();\n      }\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [markerId]);\n\n  return (\n    <div className=\"panorama-container\">\n      <div\n        ref={viewerRef}\n        className=\"panorama-viewer\"\n      >\n        <button \n          onClick={toggleFullscreen}\n          style={{\n            position: 'absolute',\n            bottom: '20px',\n            left: '20px',\n            zIndex: 1000,\n            padding: '8px 16px',\n            background: 'var(--color-surface-alt)',\n            color: 'var(--color-text)',\n            border: '1px solid var(--color-border)',\n            borderRadius: 'var(--radius-base)',\n            cursor: 'pointer',\n          }}\n        >\n          {isFullscreen ? 'Свернуть' : 'На весь экран'}\n        </button>\n        {/* Если нужно выводить инфу поверх панорамы */}\n        {showPointInfo && pointData && (\n          <div className=\"point-info-overlay\">\n            <h2>{pointData.filename}</h2>\n            {/* ...и т.д. */}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default PanoramaViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}